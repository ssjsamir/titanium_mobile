/**
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2019 by Axway. All Rights Reserved.
 * Licensed under the terms of the Apache Public License.
 * Please see the LICENSE included with this distribution for details.
 */

apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
	compileSdkVersion 29
	defaultConfig {
		minSdkVersion 19
		targetSdkVersion 29
		manifestPlaceholders = project.ext.tiManifestPlaceholders
		javaCompileOptions {
			annotationProcessorOptions {
				// Set up "kroll-apt" @Kroll annotation processor to generate C/C++ code bindings between V8/Java.
				// Also have it produce a JSON file of all bindings to be used by module build system.
				arguments = [
					'kroll.outputJsonFilePath': "${projectDir}/../../dist/android/titanium.bindings.json".toString(),
					'kroll.outputCppDirPath': "${projectDir}/../runtime/v8/generated".toString(),
					'kroll.jsModuleName': 'titanium'
				]
			}
		}
		externalNativeBuild {
			ndkBuild {
				cppFlags '-std=c++11'
				arguments.addAll([
					'APP_STL:=c++_shared',
					"TI_DIST_DIR=${projectDir}/../../dist".replace('\\', '\\\\'),
					"NDK_MODULE_PATH+=${projectDir}/../runtime/v8/src/ndk-modules".replace('\\', '\\\\'),
					"-j${Runtime.runtime.availableProcessors()}".toString()
				])
				if (System.getProperty('os.name').toLowerCase().contains('windows')) {
					// Reduces length of NDK command line strings by writing source file list to text files.
					arguments.add('APP_SHORT_COMMANDS=true')
				}
			}
		}
		ndk {
			abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
		}
	}
	buildTypes {
		debug {
			debuggable true
			jniDebuggable true
			externalNativeBuild {
				ndkBuild {
					arguments.add('TI_DEBUG=1')
				}
			}
		}
	}
	externalNativeBuild {
		ndkBuild {
			path "${projectDir}/../runtime/v8/src/native/Android.mk"
		}
	}
	sourceSets {
		main {
			manifest.srcFile 'AndroidManifest.xml'
			assets.srcDirs = [
				'assets',
				"${projectDir}/../modules/ui/assets"
			]
			java.srcDirs = [
				'src/java',
				"${projectDir}/../modules/accelerometer/src/java",
				"${projectDir}/../modules/analytics/src/java",
				"${projectDir}/../modules/android/src/java",
				"${projectDir}/../modules/app/src/java",
				"${projectDir}/../modules/calendar/src/java",
				"${projectDir}/../modules/contacts/src/java",
				"${projectDir}/../modules/database/src/java",
				"${projectDir}/../modules/filesystem/src/java",
				"${projectDir}/../modules/geolocation/src/java",
				"${projectDir}/../modules/gesture/src/java",
				"${projectDir}/../modules/locale/src/java",
				"${projectDir}/../modules/media/src/java",
				"${projectDir}/../modules/network/src/java",
				"${projectDir}/../modules/platform/src/java",
				"${projectDir}/../modules/ui/src/java",
				"${projectDir}/../modules/utils/src/java",
				"${projectDir}/../modules/xml/src/java",
				"${projectDir}/../runtime/common/src/java",
				"${projectDir}/../runtime/v8/src/java"
			]
			jni.srcDirs = [
				"${projectDir}/../runtime/v8/src/native",
				"${projectDir}/../runtime/v8/src/native/modules",
				"${projectDir}/../runtime/v8/generated"
			]
			res.srcDirs = [
				'res',
				"${projectDir}/../modules/ui/res"
			]
		}
	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
}

// Downloads/extracts V8 library and create a makefile for it. To be executed before C/C++ "build" or "clean".
task updateV8Library() {
	def packageJson = new groovy.json.JsonSlurper().parse(file("${projectDir}/../package.json"))
	def v8MakeFilePath = "${projectDir}/../runtime/v8/src/ndk-modules/libv8/V8Settings.mk"
	inputs.property 'v8.version', packageJson.v8.version
	inputs.property 'v8.mode', packageJson.v8.mode
	inputs.property 'v8.checksum', packageJson.v8.checksum
	outputs.file v8MakeFilePath
	outputs.files fileTree("${projectDir}/../../dist/android/libv8/${packageJson.v8.version}/${packageJson.v8.mode}")
	doLast {
		// Generate a "V8Settings.mk" makefile providing V8 information via variables.
		// This file is referenced by our "./runtime/v8/src/ndk-modules/libv8/Android.mk" file.
		def v8MakeFile = file(v8MakeFilePath)
		v8MakeFile.getParentFile().mkdirs()
		v8MakeFile.text = [
			"LIBV8_VERSION=${packageJson.v8.version}",
			"LIBV8_MODE=${packageJson.v8.mode}"
		].join('\n') + '\n'

		// Download/install the V8 library referenced in our "package.json", if not already done.
		exec {
			executable = 'node'
			workingDir = projectDir
			args = ['-e', "require('./libv8-services').updateLibraryThenExit()"]
		}
	}
}
preBuild.dependsOn updateV8Library
tasks.withType(com.android.build.gradle.tasks.ExternalNativeCleanTask) {
	dependsOn updateV8Library
}

// Performs a transpile/polyfill/rollup of our "titanium_mobile/common/Resources" directory tree's JS files,
// takes a V8 snapshot of rolled-up files, and then generates a C++ header file of that snapshot to be compiled-in.
// Note: This supports incremental builds. Only executes when JS files change or snapshot output file is missing.
task snapshotTiCommonFiles() {
	inputs.dir "${projectDir}/../../common/Resources"
	inputs.file "${projectDir}/../../build/lib/builder.js"
	inputs.file "${projectDir}/../../build/lib/android/index.js"
	outputs.file "${projectDir}/../runtime/v8/generated/V8Snapshots.h"
	doLast {
		exec {
			executable = 'node'
			workingDir = projectDir
			args = ['-e', "require('./libv8-services').createSnapshotThenExit()"]
		}
	}
}

// Runs our "prebuild.js" script before the C/C++ compile, but after Java compile. (Mid-build script?)
// This downloads the V8 library, generates C/C++ files, and generates some asset files.
tasks.withType(JavaCompile) {
	dependsOn snapshotTiCommonFiles
	doLast {
		exec {
			executable = 'node'
			workingDir = projectDir
			args = ['prebuild.js']
		}
	}
}

clean.doLast {
	// Delete generated C/C++ files.
	project.delete file("${projectDir}/../runtime/v8/generated")

	// Delete the files copied to our distribution directory. This is what gets packaged/installed.
	project.delete fileTree(dir: file("${projectDir}/../../dist/android"), include: '**/*', exclude: 'libv8/**/*')
}

dependencies {
	// This reads our code's @Kroll annotations and generates code which interops between V8 and proxy classes.
	annotationProcessor project(':kroll-apt')
	compileOnly project(':kroll-apt')

	// AndroidX Library dependencies.
	implementation "androidx.appcompat:appcompat:${project.ext.tiAndroidXAppCompatLibVersion}"
	implementation 'androidx.cardview:cardview:1.0.0'
	implementation "androidx.core:core:${project.ext.tiAndroidXCoreLibVersion}"
	implementation 'androidx.drawerlayout:drawerlayout:1.0.0'
	implementation 'androidx.exifinterface:exifinterface:1.1.0'
	implementation "androidx.fragment:fragment:${project.ext.tiAndroidXFragmentLibVersion}"
	implementation 'androidx.media:media:1.1.0'
	implementation 'androidx.recyclerview:recyclerview:1.1.0'
	implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
	implementation 'androidx.transition:transition:1.2.0'
	implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
	implementation 'androidx.vectordrawable:vectordrawable-animated:1.1.0'
	implementation 'androidx.viewpager:viewpager:1.0.0'
	compileOnly 'androidx.annotation:annotation:1.1.0'

	//TODO: Remove multidex library when our min OS version supported is Android 5.0 or higher.
	implementation 'androidx.multidex:multidex:2.0.1'

	// Google's "Material Components" themed UI library.
	implementation "com.google.android.material:material:${project.ext.tiMaterialLibVersion}"

	// The Google Play Services libraries are only used by Titanium's geolocation feature.
	// We link to them dynamically at runtime. So, they can be safely excluded when in the app project.
	implementation "com.google.android.gms:play-services-base:${project.ext.tiPlayServicesBaseLibVersion}"
	implementation 'com.google.android.gms:play-services-location:17.0.0'

	// Reference all local JAR file dependencies.
	implementation fileTree(dir: 'lib', include: ['*.jar'])
	implementation fileTree(dir: "${projectDir}/../modules/ui/lib", include: ['*.jar'])
	implementation fileTree(dir: "${projectDir}/../modules/xml/lib", include: ['*.jar'])
	implementation fileTree(dir: "${projectDir}/../runtime/v8/lib", include: ['*.jar'])
}

// This block is used when we do a "gradlew :titanium:publish", which is invoked by our "node scons package" tool.
// It generates a maven "m2repository" directory tree containing our Titanium AAR and several XML versioning files.
// The below will only work if you do a release build via "gradlew :titanium:assembleRelease" first.
publishing {
	publications {
		titaniumPublication(MavenPublication) {
			// Use the base version string (such as "9.0.0") without the ".RC" or ".GA" appended to it.
			// Note: Ideally, we should use the full "versionTag" string, but our Jenkins build system
			//       currently appends the ".RC" or ".GA" part after the "node scons package" process.
			def versionString = '1.0.0'
			if (System.env.TI_SDK_BUILD_VERSION != null) {
				versionString = System.env.TI_SDK_BUILD_VERSION
			}

			// Set up maven repo info.
			groupId 'org.appcelerator'
			artifactId 'titanium'
			version versionString
			artifact file("${buildDir}/outputs/aar/titanium-release.aar")

			// Generates the "*.pom" XML file containing all of Titanium's above dependencies,
			// but excluding Google Play Services dependencies which is optional.
			pom.withXml {
				def dependenciesNode = asNode().appendNode('dependencies')
				def list = new ArrayList<Dependency>()
				list.addAll(configurations.api.allDependencies)
				list.addAll(configurations.implementation.allDependencies)
				list.each {
					if ((it.group != null) && (it.name != null)) {
						if (it.group != 'com.google.android.gms') {
							def childNode = dependenciesNode.appendNode('dependency')
							childNode.appendNode('groupId', it.group)
							childNode.appendNode('artifactId', it.name)
							childNode.appendNode('version', it.version)
						}
					}
				}
			}
		}
	}
	repositories {
		maven {
			// The maven directory tree produced above will be outputted to the following local directory.
			url "${buildDir}/outputs/m2repository"
		}
	}
}
publish.doLast {
	// After above publishing step, extract C/C++ "*.so" libraries from AAR to "./build/outputs/jniLibs" directory.
	def jniLibsOutputDir = "${buildDir}/outputs/jniLibs"
	project.delete jniLibsOutputDir
	copy {
		from zipTree("${buildDir}/outputs/aar/titanium-release.aar")
		into jniLibsOutputDir
		include 'jni/**/*'
		includeEmptyDirs false
		eachFile {
			it.relativePath = new RelativePath(true, it.relativePath.segments.drop(1))
		}
	}
}
